#!/usr/bin/env node

'use strict';

var poliglota = require('../src/poliglota');
var program = require('commander');
var pkg = require('../package.json');

/**
 *  CLI
 */

program
  .version(pkg.version)
  .option('-t, --text [text]', 'Text to be translated')
  .option('-f, --from [lang]', 'Language to translate the text from')
  .option('-tl, --to [tolang]', 'Language to translate the text to')
  .option('-m, --mapping', 'Shows the table of languages')
  .on('--help', function(){
    console.log('  Examples:');
    console.log('');
    console.log('    $ poliglota --text="O livro est√° sobre a mesa" --to en');
    console.log('');
  }).parse(process.argv);


/**
 * Main
 */

if (process.stdin.isTTY) handleTTY();
else  handlePipe();

/**
 *  Control functions
 */

function handleTTY () {
  if (program.mapping || program.m) {
    var mappingTable = require('./mapping-table');

    console.log(mappingTable.toString());
    process.exit(0);
  }

  if (!(program.text && program.to)) {
    program.help();
  }

  poliglota.translate(program.text, program.to).then(function (tt) {
    process.stdout.write(tt);
    process.exit(0);
  }, function (err) {
    console.error('Error translating.');
    process.exit(1);
  });
}

function handlePipe () {
  var createChunkHandler = function () {
    var stored = '';

    return function (chunk) {
      return stored += chunk ? chunk : '';
    };
  };

  var chunkHandler = createChunkHandler();

  process.stdin.setEncoding('utf8');
  process.stdin.on('readable', function () {
    var chunk = process.stdin.read();

    if (chunk) chunkHandler(chunk);
  });

  process.stdin.on('end', function () {
    var data = chunkHandler();

    if (!program.to) {
      console.warn("No 'to lang' specified. Check --help");
      process.exit(1);
    }

    poliglota.translate(data, program.to).then(function (tt) {
      process.stdout.write(tt);
      process.exit(0);
    }, function (err) {
      console.error('Error translating.');
      process.exit(1);
    });

  });
}
